// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/senyabanana/shop-service/internal/entity"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserRepository) CreateUser(ctx context.Context, user entity.User) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepositoryMockRecorder) CreateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepository)(nil).CreateUser), ctx, user)
}

// GetUser mocks base method.
func (m *MockUserRepository) GetUser(ctx context.Context, username string) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, username)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserRepositoryMockRecorder) GetUser(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserRepository)(nil).GetUser), ctx, username)
}

// GetUserBalance mocks base method.
func (m *MockUserRepository) GetUserBalance(ctx context.Context, userID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserBalance", ctx, userID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserBalance indicates an expected call of GetUserBalance.
func (mr *MockUserRepositoryMockRecorder) GetUserBalance(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBalance", reflect.TypeOf((*MockUserRepository)(nil).GetUserBalance), ctx, userID)
}

// UpdateCoins mocks base method.
func (m *MockUserRepository) UpdateCoins(ctx context.Context, userID, amount int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCoins", ctx, userID, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCoins indicates an expected call of UpdateCoins.
func (mr *MockUserRepositoryMockRecorder) UpdateCoins(ctx, userID, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCoins", reflect.TypeOf((*MockUserRepository)(nil).UpdateCoins), ctx, userID, amount)
}

// MockTransactionRepository is a mock of TransactionRepository interface.
type MockTransactionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionRepositoryMockRecorder
}

// MockTransactionRepositoryMockRecorder is the mock recorder for MockTransactionRepository.
type MockTransactionRepositoryMockRecorder struct {
	mock *MockTransactionRepository
}

// NewMockTransactionRepository creates a new mock instance.
func NewMockTransactionRepository(ctrl *gomock.Controller) *MockTransactionRepository {
	mock := &MockTransactionRepository{ctrl: ctrl}
	mock.recorder = &MockTransactionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionRepository) EXPECT() *MockTransactionRepositoryMockRecorder {
	return m.recorder
}

// GetReceivedTransactions mocks base method.
func (m *MockTransactionRepository) GetReceivedTransactions(ctx context.Context, userID int64) ([]entity.TransactionDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReceivedTransactions", ctx, userID)
	ret0, _ := ret[0].([]entity.TransactionDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReceivedTransactions indicates an expected call of GetReceivedTransactions.
func (mr *MockTransactionRepositoryMockRecorder) GetReceivedTransactions(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReceivedTransactions", reflect.TypeOf((*MockTransactionRepository)(nil).GetReceivedTransactions), ctx, userID)
}

// GetSentTransactions mocks base method.
func (m *MockTransactionRepository) GetSentTransactions(ctx context.Context, userID int64) ([]entity.TransactionDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSentTransactions", ctx, userID)
	ret0, _ := ret[0].([]entity.TransactionDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSentTransactions indicates an expected call of GetSentTransactions.
func (mr *MockTransactionRepositoryMockRecorder) GetSentTransactions(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSentTransactions", reflect.TypeOf((*MockTransactionRepository)(nil).GetSentTransactions), ctx, userID)
}

// InsertTransaction mocks base method.
func (m *MockTransactionRepository) InsertTransaction(ctx context.Context, fromUserID, toUserID, amount int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTransaction", ctx, fromUserID, toUserID, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertTransaction indicates an expected call of InsertTransaction.
func (mr *MockTransactionRepositoryMockRecorder) InsertTransaction(ctx, fromUserID, toUserID, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTransaction", reflect.TypeOf((*MockTransactionRepository)(nil).InsertTransaction), ctx, fromUserID, toUserID, amount)
}

// MockInventoryRepository is a mock of InventoryRepository interface.
type MockInventoryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockInventoryRepositoryMockRecorder
}

// MockInventoryRepositoryMockRecorder is the mock recorder for MockInventoryRepository.
type MockInventoryRepositoryMockRecorder struct {
	mock *MockInventoryRepository
}

// NewMockInventoryRepository creates a new mock instance.
func NewMockInventoryRepository(ctrl *gomock.Controller) *MockInventoryRepository {
	mock := &MockInventoryRepository{ctrl: ctrl}
	mock.recorder = &MockInventoryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInventoryRepository) EXPECT() *MockInventoryRepositoryMockRecorder {
	return m.recorder
}

// GetInventoryItem mocks base method.
func (m *MockInventoryRepository) GetInventoryItem(ctx context.Context, userID, merchID int64) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInventoryItem", ctx, userID, merchID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInventoryItem indicates an expected call of GetInventoryItem.
func (mr *MockInventoryRepositoryMockRecorder) GetInventoryItem(ctx, userID, merchID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInventoryItem", reflect.TypeOf((*MockInventoryRepository)(nil).GetInventoryItem), ctx, userID, merchID)
}

// GetItem mocks base method.
func (m *MockInventoryRepository) GetItem(ctx context.Context, itemName string) (entity.MerchItems, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItem", ctx, itemName)
	ret0, _ := ret[0].(entity.MerchItems)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItem indicates an expected call of GetItem.
func (mr *MockInventoryRepositoryMockRecorder) GetItem(ctx, itemName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItem", reflect.TypeOf((*MockInventoryRepository)(nil).GetItem), ctx, itemName)
}

// GetUserInventory mocks base method.
func (m *MockInventoryRepository) GetUserInventory(ctx context.Context, userID int64) ([]entity.InventoryItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInventory", ctx, userID)
	ret0, _ := ret[0].([]entity.InventoryItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInventory indicates an expected call of GetUserInventory.
func (mr *MockInventoryRepositoryMockRecorder) GetUserInventory(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInventory", reflect.TypeOf((*MockInventoryRepository)(nil).GetUserInventory), ctx, userID)
}

// InsertInventoryItem mocks base method.
func (m *MockInventoryRepository) InsertInventoryItem(ctx context.Context, userID, merchID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertInventoryItem", ctx, userID, merchID)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertInventoryItem indicates an expected call of InsertInventoryItem.
func (mr *MockInventoryRepositoryMockRecorder) InsertInventoryItem(ctx, userID, merchID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertInventoryItem", reflect.TypeOf((*MockInventoryRepository)(nil).InsertInventoryItem), ctx, userID, merchID)
}

// UpdateInventoryItem mocks base method.
func (m *MockInventoryRepository) UpdateInventoryItem(ctx context.Context, userID, merchID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInventoryItem", ctx, userID, merchID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateInventoryItem indicates an expected call of UpdateInventoryItem.
func (mr *MockInventoryRepositoryMockRecorder) UpdateInventoryItem(ctx, userID, merchID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInventoryItem", reflect.TypeOf((*MockInventoryRepository)(nil).UpdateInventoryItem), ctx, userID, merchID)
}
